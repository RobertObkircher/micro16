### Aufgabe 5 ###
#R0 = 0..15

# 0x100 in R4
R4 <- lsh (1 + 1)
R4 <- lsh (R4 + R4)
R4 <- lsh (R4 + R4)
R4 <- lsh (R4 + R4)

# Bit Mask in R1:
R1 <- 1
R0 if Z goto .read :loop 
R1 <- lsh (R1)
R0 <- R0 + (-1)
goto .loop

# Read into R2
MAR <- R4 rd :read
rd
R2 <- MBR
R9 <- R2

# Write flipped bit
R3 <- R2 & R1 if Z goto .then
R3 <- ~R3
MBR <- R2 & R3 wr goto .write
MBR <- R2 + R1 wr :then
wr :write### Aufgabe 6 ###
# sum = n * (min + max) / 2
#          = max * (1 + max) / 2
#          = rsh (max + max * max)
# R0: 1..200

# first compute max * max in R1
R1 <- 0   # Result
R2 <- -1
R3 <- R0 

# For each bit in first position:
R2 <- lsh (R2) :loop
R3 <- lsh (R3)

# Check if done
R2 if Z goto .end

# Shift result
R1 <- lsh (R1)

# Nothing to do if zero
(~R3); if N goto .loop

# Add R0
R1 <- R1 + R0
goto .loop

# Final result
R1 <- rsh (R0 + R1) :end





### Aufgabe 7 ###
# AC = 10
AC <- lsh (1 + 1)
AC <- lsh (AC)
AC <- AC + 1
AC <- AC + 1

R1 <- 0
R2 <- 0
R3 <- 0
R4 <- 0
R5 <- 0

AC if Z goto .end :loop
AC <- AC + (-1)

# Store xor bit in R6
R6 <- R5

# Store next bit in R7
R7 <- R0 & 1
R0 <- rsh (R0)

R5 <- R6 + R4
R5 <- R5 & 1

R4 <- R3

R3 <- R6 + R2
R3 <- R3 & 1

R2 <- R1

R1 <- R6 + R7
R1 <- R1 & 1

goto .loop


# Store result in R0
:end
R0 <- lsh (R5)
R0 <- lsh (R0 + R4)
R0 <- lsh (R0 + R3)
R0 <- lsh (R0 + R2)
R0 <- R0 + R1
### Aufgabe 8 ###
MAR <- -1 rd
rd
R0 <- MBR
R1 <- 1

R0 if Z goto .end :loop
R2 <- R0 & 1
R1 <- R1 + R2
R1 <- R1 & 1
R0 <- rsh (R0)
goto .loop

:end### Aufgabe 9 ###
# AC = -8
AC <- lsh ((-1) + (-1))
AC <- AC + AC

# key R3, message R4
MAR <- R0 rd :loop
R0 <- R0 + 1; rd
R3 <- MBR; MAR <- R1 rd
R1 <- R1 + 1; rd
R4 <- MBR
R2 <- 1 + R2; MAR <- R2

# xor = (a & -b) or (-a & b)
R5 <- ~R4
R5 <- R5 & R3
R6 <- ~R3
R6 <- R6 & R4
MBR <- R5 + R6; wr
AC <- AC + 1; wr; if N goto .loop




